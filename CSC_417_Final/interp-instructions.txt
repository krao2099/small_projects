CONTENTS:

(1) Instructions for loading into Racket or Scheme48
      Racket's debugging is excellent, btw.
      
(2) Hints on how to read the code

-----------------------------------------------------------------------------

(1a) RACKET

To load one of our interpreters into Racket, uncomment the first line, which
declares #lang racket.  Or, use the Racket IDE menu to "select language"
(racket).

(1b) Scheme48

We will need some code from the big-scheme package, like the "error" function
and "map".  Enter this at the command prompt to open that package:

,open big-scheme

-----------------------------------------------------------------------------

(2) The interpreter is near the end of the file, followed by a short,
rudimentary test function.  The evaluation function is called `ev`.

But there is a convenient way to run the interpreter using `run`.  It peforms
desugaring, turning `let` into anonymous function application.  It also creates
a fresh environment for you.  The `show-desugar` shows the AST transformation
using an empty list for the environment:

    > (run '(let y 2 (add i y)))
    3
    > (show-desugar '(let y 2 (add i y)))
    ((fn (y) (add i y) ()) 2)
    > 

Best to skip all the utility functions at the top of the file.  If you read
those only as needed, there's a good chance you can ignore most of them.

I left in a few display statements that can be really useful, in case you want
to uncomment them.

Consider using the `diff` tool to see what is different between each of the
interpreters.  But this is not necessary (at all!) to answer questions about
each one.


